/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults } from "@stencil/router";
import { GustModel, ISource } from "@arcaffe/store";
import { RegistrationResponse } from "./components/bma-iframe-kid/bma-iframe-kid";
import { AppServices } from ".";
import { Dimensions } from "./components/bma-iframe-kid/bma-iframe-kid";
import { DisplayModes } from "./components/bma-window/types";
export namespace Components {
    interface AppHome {
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface BmaIframeCross {
        "height": number;
        "iframeRef": HTMLIFrameElement;
        "scriptToInject": string;
        "src": string;
        "width": number;
    }
    interface BmaIframeKid {
        /**
          * Is Hidden?
         */
        "hidden": boolean;
        /**
          * Data model to inject the iframe
         */
        "model": GustModel;
        /**
          * Name of iframe module, needed for dexie db record.
         */
        "name": string;
        /**
          * @param registrationResponse is the response of the registration
          * @returns Promise<boolean> represent the registration response handling success
         */
        "registrationResponse": ({ success, payload, errors, }: RegistrationResponse) => Promise<boolean>;
        /**
          * Services to inject the iframe
         */
        "services": any;
        /**
          * Url address to load
         */
        "src": string;
    }
    interface BmaMain {
    }
    interface BmaManager {
        "name": string;
        "userId": string;
    }
    interface BmaMap {
    }
    interface BmaMapEffects {
        /**
          * Map object
         */
        "map": L.Map;
    }
    interface BmaMapMaterial {
        /**
          * The color of geometry
         */
        "color": string;
        /**
          * The GeoJson feature
         */
        "geo": GeoJSON.Feature;
        /**
          * The id of material
         */
        "geoId": string;
    }
    interface BmaMapSourceLayer {
        /**
          * The middle name
         */
        "map": L.Map;
        /**
          * The Source name
         */
        "source": ISource;
    }
    interface BmaWindow {
        /**
          * Is resizable
         */
        "dimensions": Dimensions;
        /**
          * Display modes
         */
        "displayMode": DisplayModes;
        /**
          * Enabled Display modes
         */
        "enabledDisplayModes": DisplayModes[];
        /**
          * Is resizable
         */
        "resize": string;
    }
    interface BmaWindowHeader {
        /**
          * The window name
         */
        "windowName": string;
    }
    interface OneHeader {
    }
    interface OneTab {
        "disabled": string;
        "selected": string;
        "tabName": string;
    }
    interface OneTabs {
        "forceSelectedTab": string;
    }
    interface PortalPanel {
        "isOpened": boolean;
        "name": string;
        "portalGateSelector": string;
    }
    interface WorkSurface {
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLBmaIframeCrossElement extends Components.BmaIframeCross, HTMLStencilElement {
    }
    var HTMLBmaIframeCrossElement: {
        prototype: HTMLBmaIframeCrossElement;
        new (): HTMLBmaIframeCrossElement;
    };
    interface HTMLBmaIframeKidElement extends Components.BmaIframeKid, HTMLStencilElement {
    }
    var HTMLBmaIframeKidElement: {
        prototype: HTMLBmaIframeKidElement;
        new (): HTMLBmaIframeKidElement;
    };
    interface HTMLBmaMainElement extends Components.BmaMain, HTMLStencilElement {
    }
    var HTMLBmaMainElement: {
        prototype: HTMLBmaMainElement;
        new (): HTMLBmaMainElement;
    };
    interface HTMLBmaManagerElement extends Components.BmaManager, HTMLStencilElement {
    }
    var HTMLBmaManagerElement: {
        prototype: HTMLBmaManagerElement;
        new (): HTMLBmaManagerElement;
    };
    interface HTMLBmaMapElement extends Components.BmaMap, HTMLStencilElement {
    }
    var HTMLBmaMapElement: {
        prototype: HTMLBmaMapElement;
        new (): HTMLBmaMapElement;
    };
    interface HTMLBmaMapEffectsElement extends Components.BmaMapEffects, HTMLStencilElement {
    }
    var HTMLBmaMapEffectsElement: {
        prototype: HTMLBmaMapEffectsElement;
        new (): HTMLBmaMapEffectsElement;
    };
    interface HTMLBmaMapMaterialElement extends Components.BmaMapMaterial, HTMLStencilElement {
    }
    var HTMLBmaMapMaterialElement: {
        prototype: HTMLBmaMapMaterialElement;
        new (): HTMLBmaMapMaterialElement;
    };
    interface HTMLBmaMapSourceLayerElement extends Components.BmaMapSourceLayer, HTMLStencilElement {
    }
    var HTMLBmaMapSourceLayerElement: {
        prototype: HTMLBmaMapSourceLayerElement;
        new (): HTMLBmaMapSourceLayerElement;
    };
    interface HTMLBmaWindowElement extends Components.BmaWindow, HTMLStencilElement {
    }
    var HTMLBmaWindowElement: {
        prototype: HTMLBmaWindowElement;
        new (): HTMLBmaWindowElement;
    };
    interface HTMLBmaWindowHeaderElement extends Components.BmaWindowHeader, HTMLStencilElement {
    }
    var HTMLBmaWindowHeaderElement: {
        prototype: HTMLBmaWindowHeaderElement;
        new (): HTMLBmaWindowHeaderElement;
    };
    interface HTMLOneHeaderElement extends Components.OneHeader, HTMLStencilElement {
    }
    var HTMLOneHeaderElement: {
        prototype: HTMLOneHeaderElement;
        new (): HTMLOneHeaderElement;
    };
    interface HTMLOneTabElement extends Components.OneTab, HTMLStencilElement {
    }
    var HTMLOneTabElement: {
        prototype: HTMLOneTabElement;
        new (): HTMLOneTabElement;
    };
    interface HTMLOneTabsElement extends Components.OneTabs, HTMLStencilElement {
    }
    var HTMLOneTabsElement: {
        prototype: HTMLOneTabsElement;
        new (): HTMLOneTabsElement;
    };
    interface HTMLPortalPanelElement extends Components.PortalPanel, HTMLStencilElement {
    }
    var HTMLPortalPanelElement: {
        prototype: HTMLPortalPanelElement;
        new (): HTMLPortalPanelElement;
    };
    interface HTMLWorkSurfaceElement extends Components.WorkSurface, HTMLStencilElement {
    }
    var HTMLWorkSurfaceElement: {
        prototype: HTMLWorkSurfaceElement;
        new (): HTMLWorkSurfaceElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "bma-iframe-cross": HTMLBmaIframeCrossElement;
        "bma-iframe-kid": HTMLBmaIframeKidElement;
        "bma-main": HTMLBmaMainElement;
        "bma-manager": HTMLBmaManagerElement;
        "bma-map": HTMLBmaMapElement;
        "bma-map-effects": HTMLBmaMapEffectsElement;
        "bma-map-material": HTMLBmaMapMaterialElement;
        "bma-map-source-layer": HTMLBmaMapSourceLayerElement;
        "bma-window": HTMLBmaWindowElement;
        "bma-window-header": HTMLBmaWindowHeaderElement;
        "one-header": HTMLOneHeaderElement;
        "one-tab": HTMLOneTabElement;
        "one-tabs": HTMLOneTabsElement;
        "portal-panel": HTMLPortalPanelElement;
        "work-surface": HTMLWorkSurfaceElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
    }
    interface BmaIframeCross {
        "height"?: number;
        "iframeRef"?: HTMLIFrameElement;
        "onIframeLoad"?: (event: CustomEvent<HTMLIFrameElement>) => void;
        "scriptToInject"?: string;
        "src": string;
        "width"?: number;
    }
    interface BmaIframeKid {
        /**
          * Is Hidden?
         */
        "hidden"?: boolean;
        /**
          * Data model to inject the iframe
         */
        "model"?: GustModel;
        /**
          * Name of iframe module, needed for dexie db record.
         */
        "name"?: string;
        /**
          * Public Method on the element that called when the child mount and let the parent know about his new baby;
         */
        "onRegisterMe"?: (event: CustomEvent<any>) => void;
        /**
          * Services to inject the iframe
         */
        "services"?: any;
        /**
          * Url address to load
         */
        "src"?: string;
    }
    interface BmaMain {
    }
    interface BmaManager {
        "name"?: string;
        "onReady"?: (event: CustomEvent<AppServices>) => void;
        "userId"?: string;
    }
    interface BmaMap {
    }
    interface BmaMapEffects {
        /**
          * Map object
         */
        "map"?: L.Map;
    }
    interface BmaMapMaterial {
        /**
          * The color of geometry
         */
        "color"?: string;
        /**
          * The GeoJson feature
         */
        "geo"?: GeoJSON.Feature;
        /**
          * The id of material
         */
        "geoId"?: string;
        "onAdd"?: (event: CustomEvent<L.GeoJSON>) => void;
        "onGeoClick"?: (event: CustomEvent<{geo:L.GeoJSON, id:string}>) => void;
        "onRemove"?: (event: CustomEvent<L.GeoJSON>) => void;
    }
    interface BmaMapSourceLayer {
        /**
          * The middle name
         */
        "map"?: L.Map;
        /**
          * The Source name
         */
        "source"?: ISource;
    }
    interface BmaWindow {
        /**
          * Is resizable
         */
        "dimensions"?: Dimensions;
        /**
          * Display modes
         */
        "displayMode"?: DisplayModes;
        /**
          * Enabled Display modes
         */
        "enabledDisplayModes"?: DisplayModes[];
        /**
          * Is resizable
         */
        "resize"?: string;
    }
    interface BmaWindowHeader {
        /**
          * Emit event to change window display mode
         */
        "onChangeDisplayMode"?: (event: CustomEvent<DisplayModes>) => void;
        /**
          * The window name
         */
        "windowName"?: string;
    }
    interface OneHeader {
    }
    interface OneTab {
        "disabled"?: string;
        "selected"?: string;
        "tabName"?: string;
    }
    interface OneTabs {
        "forceSelectedTab"?: string;
        "onSelected"?: (event: CustomEvent<{ selected: string }>) => void;
    }
    interface PortalPanel {
        "isOpened"?: boolean;
        "name"?: string;
        "portalGateSelector"?: string;
    }
    interface WorkSurface {
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "bma-iframe-cross": BmaIframeCross;
        "bma-iframe-kid": BmaIframeKid;
        "bma-main": BmaMain;
        "bma-manager": BmaManager;
        "bma-map": BmaMap;
        "bma-map-effects": BmaMapEffects;
        "bma-map-material": BmaMapMaterial;
        "bma-map-source-layer": BmaMapSourceLayer;
        "bma-window": BmaWindow;
        "bma-window-header": BmaWindowHeader;
        "one-header": OneHeader;
        "one-tab": OneTab;
        "one-tabs": OneTabs;
        "portal-panel": PortalPanel;
        "work-surface": WorkSurface;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "bma-iframe-cross": LocalJSX.BmaIframeCross & JSXBase.HTMLAttributes<HTMLBmaIframeCrossElement>;
            "bma-iframe-kid": LocalJSX.BmaIframeKid & JSXBase.HTMLAttributes<HTMLBmaIframeKidElement>;
            "bma-main": LocalJSX.BmaMain & JSXBase.HTMLAttributes<HTMLBmaMainElement>;
            "bma-manager": LocalJSX.BmaManager & JSXBase.HTMLAttributes<HTMLBmaManagerElement>;
            "bma-map": LocalJSX.BmaMap & JSXBase.HTMLAttributes<HTMLBmaMapElement>;
            "bma-map-effects": LocalJSX.BmaMapEffects & JSXBase.HTMLAttributes<HTMLBmaMapEffectsElement>;
            "bma-map-material": LocalJSX.BmaMapMaterial & JSXBase.HTMLAttributes<HTMLBmaMapMaterialElement>;
            "bma-map-source-layer": LocalJSX.BmaMapSourceLayer & JSXBase.HTMLAttributes<HTMLBmaMapSourceLayerElement>;
            "bma-window": LocalJSX.BmaWindow & JSXBase.HTMLAttributes<HTMLBmaWindowElement>;
            "bma-window-header": LocalJSX.BmaWindowHeader & JSXBase.HTMLAttributes<HTMLBmaWindowHeaderElement>;
            "one-header": LocalJSX.OneHeader & JSXBase.HTMLAttributes<HTMLOneHeaderElement>;
            "one-tab": LocalJSX.OneTab & JSXBase.HTMLAttributes<HTMLOneTabElement>;
            "one-tabs": LocalJSX.OneTabs & JSXBase.HTMLAttributes<HTMLOneTabsElement>;
            "portal-panel": LocalJSX.PortalPanel & JSXBase.HTMLAttributes<HTMLPortalPanelElement>;
            "work-surface": LocalJSX.WorkSurface & JSXBase.HTMLAttributes<HTMLWorkSurfaceElement>;
        }
    }
}
