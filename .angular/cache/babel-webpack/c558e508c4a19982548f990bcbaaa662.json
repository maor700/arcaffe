{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport Dexie from 'dexie';\nexport class BigmaManagerDB extends Dexie {\n  constructor() {\n    super('BigmaManagerDB');\n\n    this.selectMaterialToggle = (materialId, force) => __awaiter(this, void 0, void 0, function* () {\n      return this.transaction('rw', this.materials, () => __awaiter(this, void 0, void 0, function* () {\n        const targetMaterial = yield this.materials.get(materialId);\n\n        if (targetMaterial) {\n          const {\n            isSelected,\n            sourceName\n          } = targetMaterial;\n          if (!!isSelected === force) return;\n          const finalStatus = force !== null && force !== void 0 ? force : !isSelected || true;\n          yield this.materials.where('[sourceName+isSelected]').equals([sourceName, 1]).modify({\n            isSelected: 0\n          });\n          yield this.materials.update(materialId, {\n            isSelected: finalStatus ? 1 : 0\n          });\n        }\n      }));\n    });\n\n    this.version(5).stores({\n      app: '&key, value',\n      iframes: '&name,isActive,ownerApp,displayMode,detached,size,position,resizable,detachable,closeable',\n      filters: '&name,isActive,ownerApp,displayName,icon',\n      missions: '&id, name,id,data,members',\n      sources: '&name, ownerApp,displayName,schema,isHiddenFromMap,isHiddenFromTimeline',\n      materials: '&id, [sourceName+isSelected], sourceName, isSelected, ownerApp,type,interval,geo,string,drawStyle,additionalProps,visibilityOnMap'\n    });\n    this._appTable = this.table('app');\n    const handler = {\n      get: (_target, key) => __awaiter(this, void 0, void 0, function* () {\n        var _a;\n\n        return (_a = yield this._appTable.get(key)) === null || _a === void 0 ? void 0 : _a.value;\n      }),\n      set: (_target, key, value) => __awaiter(this, void 0, void 0, function* () {\n        let result = 0;\n\n        if (yield isPropExist(this._appTable, key)) {\n          result = yield this._appTable.update(key, {\n            value\n          });\n        } else {\n          yield this._appTable.add({\n            key,\n            value\n          });\n          result = 1;\n        }\n\n        if (!result) {\n          console.error(\"can't update unexist property\");\n          return false;\n        } else {\n          return true;\n        }\n      }),\n      delete: key => __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield this.table('app').delete(key);\n          return true;\n        } catch (e) {\n          console.error(e);\n          return false;\n        }\n      })\n    };\n    this.app = new Proxy({}, handler);\n    extendsTable(this.iframes, IframeItem);\n    extendsTable(this.filters, Ifilter);\n    extendsTable(this.missions, IMission);\n    extendsTable(this.sources, Source);\n    extendsTable(this.materials, Material);\n  }\n\n}\n\nfunction extendsTable(table, classMapping) {\n  table.mapToClass(classMapping);\n\n  table.upsert = (key, value) => __awaiter(this, void 0, void 0, function* () {\n    let result = 0;\n\n    if (yield isRecordExist(table, key)) {\n      result = yield table.update(key, value);\n    } else {\n      yield table.add(value, key);\n      result = 1;\n    }\n\n    return !!result;\n  });\n\n  return table;\n}\n\nclass IframeItem {}\n\nclass Ifilter {}\n\nclass IMission {}\n\nexport class Material {}\nexport class Source {} //utils\n\nconst isPropExist = (table, propKey) => __awaiter(void 0, void 0, void 0, function* () {\n  return (yield table.where('key').equals(propKey).count()) > 0;\n});\n\nconst isRecordExist = (table, indexKey) => __awaiter(void 0, void 0, void 0, function* () {\n  return !!(yield table.get(indexKey));\n});\n\nexport const bigmaManagerDb = new BigmaManagerDB();\nconsole.log(bigmaManagerDb);","map":null,"metadata":{},"sourceType":"module"}